import 'package:flutter/material.dart';
import 'package:task_sync/core/colors.dart';
import 'package:task_sync/presentation/pages/pages_narrow/chat_detail_narrow_page.dart';

class ChatsNarrowPage extends StatefulWidget {
  const ChatsNarrowPage({super.key});

  @override
  State<ChatsNarrowPage> createState() => _ChatsNarrowPageState();
}

class _ChatsNarrowPageState extends State<ChatsNarrowPage> {
  final TextEditingController _searchController = TextEditingController();
  final List<ChatItem> _allChats = [
    ChatItem(name: '–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤', message: '–í—ã: –≤–æ–∑—å–º–∏ –≤ —Ä–∞–±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', time: '20:19'),
    ChatItem(name: '–ò—Ä–∏–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞', message: '–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.', time: '20:18'),
    ChatItem(name: '–ë–∞–Ω–∫ –í–æ—Å—Ç–æ—á–Ω—ã–π', message: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', time: '20:05', unreadCount: 3),
    ChatItem(name: '–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞', message: '–≤—ã –∏–∑ –æ—Ç–¥–µ–ª–∞ –ê–ª–µ–∫—Å–µ—è?', time: '19:56', unreadCount: 1),
    ChatItem(name: '–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤', message: '‚Ä¶–ø–æ–π–¥—É —Å–≤–æ–∏–º —Ç—ë–º–Ω—ã–º –ø—É—Ç—ë–º', time: '17:52'),
    ChatItem(name: '–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', message: '–í—ã: üöó –£–∂–µ –µ–¥—É', time: '17:51'),
    ChatItem(name: '–ú–∞—Ä–∏—è –°–æ–∫–æ–ª–æ–≤–∞', message: '–Ø —É–ø–∞–ª–∞ –≤ –æ–±–º–æ—Ä–æ–∫‚Ä¶', time: '11:27'),
    ChatItem(name: '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', message: '–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –ù–æ–≤–∏–∫–æ–≤: ü§î', time: '11:11'),
    ChatItem(name: '–ü–∞–≤–µ–ª –û—Ä–ª–æ–≤', message: '–î–∞, —Å–ª—É—à–∞—é?', time: '14:30'),
    ChatItem(name: '–ò—Ä–∏–Ω–∞ –í–æ—Å—Ç–æ—á–Ω–∞—è', message: '–ü—Ä–∏–≤–µ—Ç', time: '20:18'),
    ChatItem(name: '–ü–µ—Ç—Ä –ò–≤–∞–Ω–µ–Ω–∫–æ', message: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', time: '20:05', unreadCount: 1),
    ChatItem(name: '–ò—Ä–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', message: '–≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –æ—Ç—á–µ—Ç?', time: '19:56', unreadCount: 4),
    ChatItem(name: '–ê–ª–∏—Å–∞ –ß—É–¥–æ–≤–∞', message: '–ø–æ–¥—Å–∫–∞–∂–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–¥–∞—á–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', time: '17:52'),
    ChatItem(name: '–ú–∞–∫—Å–∏–º –†–µ–≤–≤–∞', message: '—á—Ç–æ –º–æ–≥—É –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É?', time: '17:51'),
    ChatItem(name: '–ò–≥–æ—Ä—å –ë–∞—Ä–º–∞–ª–µ–π', message: '–∫–∞–∫ —Ç–µ–±–µ –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω?', time: '11:27'),
  ];
  bool _isSearching = false;
  String _searchQuery = '';

  @override
  Widget build(BuildContext context) {
    final filteredChats = _allChats.where((chat) {
      final query = _searchQuery.toLowerCase();
      return chat.name.toLowerCase().contains(query) ||
          chat.message.toLowerCase().contains(query);
    }).toList();

    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: _isSearching
            ? TextField(
          controller: _searchController,
          autofocus: true,
          style: const TextStyle(color: lightBackground),
          decoration: const InputDecoration(
            hintText: '–ü–æ–∏—Å–∫...',
            hintStyle: TextStyle(color: lightBackgroundTertiary),
            border: InputBorder.none,
          ),
          onChanged: (value) => setState(() => _searchQuery = value),
        )
            : const Text(
          '–ß–∞—Ç—ã',
          style: TextStyle(color: lightBackground),
        ),
        backgroundColor: lightPrimary,
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          IconButton(
            icon: Icon(_isSearching ? Icons.close : Icons.search),
            onPressed: () {
              setState(() {
                if (_isSearching) {
                  _searchQuery = '';
                  _searchController.clear();
                }
                _isSearching = !_isSearching;
              });
            },
            color: lightBackground,
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: filteredChats.length,
        itemBuilder: (context, index) {
          final chat = filteredChats[index];
          return ListTile(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => ChatDetailNarrowPage(chatName: chat.name),
                ),
              );
            },
            leading: const CircleAvatar(
              backgroundImage: AssetImage('assets/images/default_avatar.webp'),
              radius: 24,
            ),
            title: Text(chat.name, style: const TextStyle(fontWeight: FontWeight.w600)),
            subtitle: Text(chat.message, maxLines: 1, overflow: TextOverflow.ellipsis),
            trailing: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(chat.time, style: const TextStyle(fontSize: 12)),
                if (chat.unreadCount > 0)
                  Container(
                    margin: const EdgeInsets.only(top: 4),
                    padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.green,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${chat.unreadCount}',
                      style: const TextStyle(color: Colors.white, fontSize: 12),
                    ),
                  ),
              ],
            ),
          );
        },
      ),
    );
  }
  void showSearchDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('–ü–æ–∏—Å–∫'),
        content: TextField(
          controller: _searchController,
          decoration: const InputDecoration(hintText: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
          onChanged: (value) => setState(() => _searchQuery = value),
        ),
        actions: [
          TextButton(
            onPressed: () {
              setState(() => _searchQuery = _searchController.text);
              Navigator.pop(context);
            },
            child: const Text('–ù–∞–π—Ç–∏'),
          ),
        ],
      ),
    );
  }
}

class ChatItem {
  final String name;
  final String message;
  final String time;
  final int unreadCount;

  ChatItem({
    required this.name,
    required this.message,
    required this.time,
    this.unreadCount = 0,
  });
}
